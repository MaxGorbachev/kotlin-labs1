# -*- coding: utf-8 -*-
import codecs

from aiogram import Bot, Dispatcher, executor, types

from aiogram.types import InlineQuery, \
    InputTextMessageContent, InlineQueryResultArticle

from aiogram.utils.markdown import link

from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

from modules import start as start
from db_connection import *
from settings import *

bot = Bot(token=TOKEN)

dp = Dispatcher(bot)

added_info = {}
for elem in admin_ids:
    added_info[elem] = {}


async def reg(user_id):
    user = await get_user_data(user_id)
    if user is None:
        user = await create_user(user_id)
    return dict(user)


@dp.message_handler(commands=['admin'])
async def send_welcome(message):
    await reg(str(message.from_user.id))

    if message.from_user.id in admin_ids:
        inline_kb = InlineKeyboardMarkup()

        inline_btn_1 = InlineKeyboardButton('üìà–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data='statistics')

        inline_btn_2 = InlineKeyboardButton('üìÑ–°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤', callback_data='channel_list')

        inline_btn_3 = InlineKeyboardButton('üìÑ–°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤', callback_data='film_list')

        inline_btn_4 = InlineKeyboardButton('üé•–î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º', callback_data='add_film')

        inline_btn_5 = InlineKeyboardButton('üìå–£–¥–∞–ª–∏—Ç—å –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞', callback_data='delete_film_number')

        inline_btn_6 = InlineKeyboardButton('üìå–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='add_channel')

        inline_btn_7 = InlineKeyboardButton('üìå–£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª', callback_data='delete_channel')

        inline_btn_8 = InlineKeyboardButton('üìå–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É ', callback_data='mailing')


        inline_kb.add(inline_btn_1)
        inline_kb.add(inline_btn_2)
        inline_kb.add(inline_btn_3)
        inline_kb.add(inline_btn_4)
        inline_kb.add(inline_btn_5)
        inline_kb.add(inline_btn_6)
        inline_kb.add(inline_btn_7)
        inline_kb.add(inline_btn_8)

        await bot.send_message(chat_id=message.from_user.id, text='*–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å*', parse_mode='Markdown',
                               reply_markup=inline_kb)


@dp.message_handler(content_types=['photo'])
async def handle_docs_photo(message):
    user = await reg(str(message.from_user.id))

    if user['status'] == "mailing":
        file = await bot.get_file(message.photo[-1].file_id)

        await message.photo[-1].download(destination_dir='')

        await change_user_status(message.from_user.id, "0")

        all_users = await get_users()

        for user in all_users:
            user = dict(user)
            try:
                await bot.send_photo(chat_id=user['tg_id'], photo=open(file.file_path, 'rb'),
                                     caption=str(message.caption))
            except Exception as ex:
                print(ex)
                await bot.send_message(chat_id=message.from_user.id, text=f'{ex}\n–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')

        await bot.send_message(chat_id=message.from_user.id, text='–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.')


@dp.message_handler(commands=['start'])
async def send_welcome(message):
    await reg(str(message.from_user.id))

    if await check_follow(message):
        await bot.send_message(message.from_user.id,
                               text='*–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ üçø–ö–ò–ù–û–ú–û–õ–û–ö–û - –ë–û–¢ | –ü–æ–∏—Å–∫üîç\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –Æ–¢–£–ë | –¢–ò–ö –¢–û–ö –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´üîé–ü–æ–∏—Å–∫¬ª üëá*',
                               parse_mode='Markdown', reply_markup=start.greet_kb1)


@dp.callback_query_handler(text='statistics')
async def vote_up_cb_handler(call):
    await reg(str(call.from_user.id))

    users = await get_users()

    await bot.send_message(call.from_user.id, text='*üìà–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –≤ –±–æ—Ç–µ: ' + str(len(users)) + '*',
                           parse_mode='Markdown')


@dp.callback_query_handler(text='add_channel')
async def vote_up_cb_handler(call):
    await reg(str(call.from_user.id))

    await change_user_status(call.from_user.id, 'add_channel_link')

    await bot.send_message(call.from_user.id,
                           text='*–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª –±–µ–∑ @\n\n–ü—Ä–∏–º–µ—Ä: –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ @twochannel, –≤–≤–µ–¥–∏—Ç–µ twochannel*',
                           parse_mode='Markdown')


@dp.callback_query_handler(text='delete_film_number')
async def vote_up_cb_handler(call):
    await reg(str(call.from_user.id))

    await change_user_status(call.from_user.id, 'delete_film_number')

    await bot.send_message(call.from_user.id, text='*–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å*',
                           parse_mode='Markdown')


@dp.callback_query_handler(text='channel_list')
async def vote_up_cb_handler(call):
    channels = await get_channels()
    inline_kb = InlineKeyboardMarkup()
    for channel in channels:
        inline_btn = InlineKeyboardButton(str(channel['title']), url='https://t.me/' + str(channel['url']))
        inline_kb.add(inline_btn)
    await bot.send_message(chat_id=call.from_user.id,
                           text='*üìù –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏:*',
                           reply_markup=inline_kb, parse_mode='Markdown')


@dp.callback_query_handler(text='delete_channel')
async def vote_up_cb_handler(call):
    user = await reg(str(call.from_user.id))

    await change_user_status(user['tg_id'], 'delete_channel')

    channels = await get_channels()

    message = ""
    for channel in channels:
        channel = dict(channel)
        message += str(channel['url']) + '\n'

    await bot.send_message(call.from_user.id,
                           text='*–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–∞–Ω–∞–ª–æ–≤:\n' + message + '\n\n–í–≤–µ–¥–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å.*',
                           parse_mode='Markdown')


@dp.callback_query_handler(text='mailing')
async def vote_up_cb_handler(call):
    user = await reg(str(call.from_user.id))

    await change_user_status(user['tg_id'], 'mailing')

    await bot.send_message(call.from_user.id, text='*‚ùóÔ∏è–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ (–º–æ–∂–Ω–æ —Å —Ñ–æ—Ç–æ)*', parse_mode='Markdown')


@dp.callback_query_handler(text='add_film')
async def vote_up_cb_handler(call):
    user = await reg(str(call.from_user.id))

    await change_user_status(user['tg_id'], 'add_film_title')

    await bot.send_message(call.from_user.id, text='*–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞*', parse_mode='Markdown')


@dp.callback_query_handler(text='film_list')
async def vote_up_cb_handler(call):
    await reg(str(call.from_user.id))
    films = await get_films()
    if films:
        films = list(map(dict, films))
    message = ""
    i = 0
    while len(message) < 900 and i < len(films):
        message += "#" + str(films[i]['id']) + " " + films[i]['title'] + "\n"
        i += 1
    await bot.send_message(call.from_user.id,
                           text='–§–∏–ª—å–º—ã:\n' + message,
                           parse_mode='Markdown')


@dp.callback_query_handler(text='check')
async def vote_up_cb_handler(call):
    await reg(call.from_user.id)

    if await check_follow(call):
        await bot.send_message(call.from_user.id,
                               text='*–ü—Ä–∏–≤–µ—Ç —ç—Ç–æ üçø–ö–ò–ù–û–ú–û–õ–û–ö–û - –ë–û–¢ | –ü–æ–∏—Å–∫üîç\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –∏–∑ –Æ–¢–£–ë | –¢–ò–ö –¢–û–ö –≤–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞.\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ ¬´üîé–ü–æ–∏—Å–∫¬ª üëá*',
                               parse_mode='Markdown', reply_markup=start.greet_kb1)


@dp.message_handler()
async def send_welcome(message):
    global added_info
    user = await reg(str(message.from_user.id))

    if await check_follow(message):
        if str(message.text) == 'üîé–ü–æ–∏—Å–∫':
            await bot.send_message(chat_id=message.from_user.id, text='*üîé –î–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ö–û–î —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞*',
                                   parse_mode='Markdown')
        elif user['status'] == 'add_film_title':
            added_info[message.from_user.id]['title'] = str(message.text)
            await change_user_status(message.from_user.id, "add_film_link")
            await bot.send_message(chat_id=message.from_user.id, text='*–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è —Ñ–∏–ª—å–º–∞*',
                                   parse_mode='Markdown')
        elif user['status'] == "add_film_link":
            await change_user_status(message.from_user.id, "add_film_description")
            added_info[message.from_user.id]['link'] = str(message.text)
            await bot.send_message(chat_id=message.from_user.id,
                                   text='*–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å–º–∞("-" –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º)*',
                                   parse_mode='Markdown')
        elif user['status'] == "add_film_description":
            await change_user_status(message.from_user.id, "0")
            description = str(message.text).strip()
            print(message.text)
            print(message)
            if description == "-":
                description = " "
            await add_film(added_info[message.from_user.id]['title'], added_info[message.from_user.id]['link'],
                           description)
            added_info[message.from_user.id] = {}
            await bot.send_message(chat_id=message.from_user.id, text='*–§–∏–ª—å–º —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*',
                                   parse_mode='Markdown')
        elif user['status'] == 'mailing':

            await change_user_status(message.from_user.id, "0")
            users = await get_users()
            send_to = 0
            all_users_quantity = len(users)
            for user in users:
                user = dict(user)
                try:
                    await bot.send_message(chat_id=user['tg_id'], text=str(message.text))
                    send_to += 1
                except:
                    pass

            await bot.send_message(chat_id=message.from_user.id,
                                   text=f'*–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.*\n –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {send_to} —Å–æ–æ–±—â–µ–Ω–∏–π, –≤—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_users_quantity} ',
                                   parse_mode='Markdown')

        elif user['status'] == 'add_channel_link':
            added_info['link'] = str(message.text)

            await change_user_status(message.from_user.id, 'add_channel_title')

            await bot.send_message(chat_id=message.from_user.id, text='*–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞*',
                                   parse_mode='Markdown')

        elif user['status'] == 'add_channel_title':

            await change_user_status(message.from_user.id, '0')

            await add_channel(str(message.text), added_info['link'])

            added_info = {}

            await bot.send_message(chat_id=message.from_user.id, text='*–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*',
                                   parse_mode='Markdown')

        elif user['status'] == 'delete_film_number':

            result = await delete_film(str(message.text))

            if result:
                await change_user_status(message.from_user.id, '0')

                await message.reply('–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω')
            else:
                await message.reply('–î–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')

        elif user['status'] == 'delete_channel':

            result = await delete_channel(str(message.text))

            if result:
                await change_user_status(user['tg_id'], "0")
                await bot.send_message(chat_id=message.from_user.id, text='*–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞!*',
                                       parse_mode='Markdown')
            else:
                await bot.send_message(chat_id=message.from_user.id,
                                       text='*–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞!*', parse_mode='Markdown')
        elif user['status'] == '0':
            film = await get_film(str(message.text))
            if film is not None:
                film = dict(film)
                try:
                    description = film['description']
                    if len(description) == 1:
                        description = ""
                    elif len(description) > 850:
                        description = "*–û–ø–∏—Å–∞–Ω–∏–µ*:\n" + film['description'][:850] + "..."
                    else:
                        description = "*–û–ø–∏—Å–∞–Ω–∏–µ*:\n" + description
                    await bot.send_photo(chat_id=message.from_user.id, photo=film['image_url'],
                                         caption='*üé¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ "' + film['title'] + '"*\n' + description,
                                         parse_mode='Markdown')

                except Exception as ex:
                    print(ex)
                    await bot.send_message(chat_id=message.from_user.id,
                                           text=f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ {ex}. \n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞', parse_mode='Markdown')

            else:
                await bot.send_message(chat_id=message.from_user.id,
                                       text='*–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞ —Ñ–∏–ª—å–º–∞!*', parse_mode='Markdown')


async def check_follow(message):
    channels = await get_channels()

    inline_kb = InlineKeyboardMarkup()
    channels_to_follow = []
    for channel in channels:
        channel = dict(channel)
        user_channel_status = await bot.get_chat_member(chat_id="@" + str(channel['url']), user_id=message.from_user.id)
        if user_channel_status["status"] == 'left':
            channels_to_follow.append(channel)
    if len(channels_to_follow) != 0:
        for channel in channels_to_follow:
            inline_btn = InlineKeyboardButton(str(channel['title']), url='https://t.me/' + str(channel['url']))
            inline_kb.add(inline_btn)
        inline_btn = InlineKeyboardButton('–ü–æ–∏—Å–∫', callback_data='check')
        inline_kb.add(inline_btn)
        bot_message = await bot.send_message(chat_id=message.from_user.id,
                                             text='*üìù –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à–∏ –∫–∞–Ω–∞–ª—ã:*',
                                             reply_markup=inline_kb, parse_mode='Markdown')
        await add_message(tg_id=message.from_user.id, message_id=bot_message.message_id)
        return False
    messages = await get_messages(message.from_user.id)
    if messages:
        for message_id in messages:
            try:
                await bot.delete_message(message.from_user.id, int(message_id))
            except Exception as ex:
                print('deleting error :', ex)
        await clear_messages(message.from_user.id)
    return True


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
